(dp1
S'output'
p2
S'<class \'psycopg2.ProgrammingError\'> syntax error at or near "VALUE"\nLINE 1: INSERT INTO tempgeo (geom) VALUE (st_geomfromgeojson(\'{"type...\n                                   ^\n'
p3
sS'layer'
p4
S'/home/ubuntu/web2py/applications/api/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Welcome to web2py!"\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\ndef show_request_vars():\n    return dict(req_vars = request.vars, req_args = request.args, request = request)\n\ndef main():\n    return dict()\n\ndef local():\n    return locals()\n\ndef post():\n    return request.post_vars\n\ndef add():\n    result = 0\n    for each in request.vars:\n        result += float(request.vars[each])\n\n    return result\n\ndef count():\n    session.counter = (session.counter or 0) + 1\n    return dict(counter=session.counter, now=request.now)\n\n@request.restful()\ndef api():\n    response.view = \'generic.\'+request.extension\n\n    def POST(*arg, **var):\n        # return response.json({\'inputvar\':v1})\n        return dict(**var)\n\n\n    return locals()\n\n\n# test to get geom as json from pgis database, asyncly\n@request.restful()\ndef geoapi():\n    from gluon.serializers import loads_json\n    # response.view = \'generic.json\'\n    def GET(recid):\n        ## the result is only part of the geojson\n        rows = db(db.wwfgeom.recid == recid).select(db.wwfgeom.geom.st_asgeojson().with_alias(\'geom\'))\n\n        ## geojson need to be constructured\n        features = [{"type": "Feature", "geometry": loads_json(row[\'geom\'])} for row in rows]\n        return response.json({"type": "FeatureCollection", "features": features})\n\n\n    def POST(**geojson_dict):\n        # geojson_dict is input from jquery, with its key the content\n\n        response.view = \'generic.json\'\n\n        # python\'s own json utilities. json.dumps() converts a dictionary to json format string\n        import json\n\n        # loads_json converts a string of json to a python dict\n        json_dict = loads_json(geojson_dict.keys()[0])\n\n        for eachfeature in json_dict[\'features\']:\n            # each feature is a dict of keys: geometry, type and properties, of which geometry is of interest\n            sql = "INSERT INTO tempgeo (geom) VALUE (st_geomfromgeojson({!r}))".format(json.dumps((eachfeature[\'geometry\'])))\n\n            # run queries\n            db.executesql(sql)\n\n        # return feature_list[0]\n        return \'success\'\n\n        # return geojson_dict[geojson_dict.keys()[0]]\n\n\n    return locals()\n\ndef get_json():\n    return dict()\n\ndef post_json():\n    return dict()\n\n\n\n# def get_geojson():\n#     from gluon.serializers import loads_json\n\n#     recid = request.args[0]\n#     response.view = \'generic.json\'\n\n#     # only expect one row as result\n\n#     ## through DAL\n#     row = db(db.wwfgeom.recid == recid).select(db.wwfgeom.geom.st_asgeojson().with_alias(\'geom\'))[0]\n#     result = row[\'geom\']\n\n#     # ## direct sql, inject warning\n#     # result =  db.executesql(\'SELECT st_asgeojson(geom) as geom FROM wwfgeom WHERE recid = %s LIMIT 1;\'%(recid,), as_dict=True)[0]\n#     # result = loads_json(result[\'geom\'])\n\n#     return result\n\n\n\n\nresponse._vars=response._caller(geoapi)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ubuntu/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ubuntu/web2py/applications/api/controllers/default.py", line 177, in <module>\n  File "/home/ubuntu/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ubuntu/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/ubuntu/web2py/applications/api/controllers/default.py", line 138, in POST\n    db.executesql(sql)\n  File "/home/ubuntu/web2py/gluon/packages/dal/pydal/base.py", line 1019, in executesql\n    adapter.execute(query)\n  File "/home/ubuntu/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 360, in execute\n    return BaseAdapter.execute(self, *a, **b)\n  File "/home/ubuntu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1385, in execute\n    return self.log_execute(*a, **b)\n  File "/home/ubuntu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1379, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\nProgrammingError: syntax error at or near "VALUE"\nLINE 1: INSERT INTO tempgeo (geom) VALUE (st_geomfromgeojson(\'{"type...\n                                   ^\n\n'
p11
s.